openapi: 3.0.0
info:
  title: Campusoul API
  description: Campusoul is an API developed as part of the ArchiOWeb course at HEIG-VD, specifically for the Media Engineering program. This API aims to provide a social networking platform for students, facilitating enriching social interactions within the campus. The API includes user management, interest management, image handling, matches, and messaging.
  version: "1.0.0"
servers:
  - url: https://campusoul-hrim.onrender.com/
    description: Production server
  - url: http://localhost:3000/
    description: Local server
tags:
  - name: Authentication
    description: Authentication
  - name: Users
    description: User management
  - name: Interests
    description: Interest management
  - name: Interest Admin
    description: Interest management (Admin)
  - name: Images
    description: Image management
  - name: Matches
    description: Match management
  - name: Messages
    description: Messaging

paths:
  /users/register:
    post:
      tags: [Authentication]
      summary: Register a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
      responses:
        "201":
          description: Successfully registered
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "400":
          description: Email already exists

  /users/login:
    post:
      tags: [Authentication]
      summary: Log in a user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
      responses:
        "200":
          description: Successful login
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "401":
          description: Invalid email or password

  /users:
    get:
      tags: [Users]
      summary: Get all users
      security:
        - BearerAuth: []
      parameters:  
        - in: query
          name: page
          schema:
            type: integer
            default: 1
          description: Numéro de la page pour la pagination
        - in: query
          name: minAge
          schema:
            type: integer
          description: Âge minimum des utilisateurs à récupérer
        - in: query
          name: maxAge
          schema:
            type: integer
          description: Âge maximum des utilisateurs à récupérer
        - in: query
          name: maxDistance
          schema:
            type: integer
          description: Distance maximale des utilisateurs à récupérer
      responses:
        "200":
          description: Données des profils utilisateurs
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "404":
          description: Utilisateur non trouvé

  /users/{userId}:
    get:
      tags: [Users]
      summary: Get user profile
      security:
        - BearerAuth: []
      parameters:
        - $ref: "#/components/parameters/UserId"
      responses:
        "200":
          description: User profile data
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "404":
          description: User not found
    patch:
      tags: [Users]
      summary: Update user profile
      security:
        - BearerAuth: []
      parameters:
        - $ref: "#/components/parameters/UserId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
      responses:
        "200":
          description: User profile updated
        "404":
          description: User not found

    delete:
      tags: [Users]
      summary: Delete user profile
      security:
        - BearerAuth: []
      parameters:
        - $ref: "#/components/parameters/UserId"
      responses:
        "200":
          description: User deleted
        "404":
          description: User not found

  /users/interests:
    post:
      tags: [Users]
      summary: Add an interest to a user
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                interestId:
                  type: string
      responses:
        "200":
          description: Interest added
        "404":
          description: User not found
        "500":
          description: Server error

  /users/{userId}/interests:
    get:
      tags: [Users]
      summary: Get user interests
      security:
        - BearerAuth: []
      parameters:
        - $ref: "#/components/parameters/UserId"
      responses:
        "200":
          description: List of user interests
        "404":
          description: User not found

  /users/{userId}/interests/{interestId}:
    delete:
      tags: [Users]
      summary: Remove an interest from a user
      security:
        - BearerAuth: []
      parameters:
        - $ref: "#/components/parameters/UserId"
        - name: interestId
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Interest removed
        "404":
          description: User not found

  /users/location/{userId}:
    post:
      tags: [Users]
      summary: Set user location
      security:
        - BearerAuth: []
      parameters:
        - $ref: "#/components/parameters/UserId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                type:
                  type: string
                  enum: ["Point"]
                coordinates:
                  type: array
                  items:
                    type: number
      responses:
        "200":
          description: Location updated
        "404":
          description: User not found

  /interests:
    post:
      tags: [Interest Admin]
      summary: Create a new interest
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
      responses:
        "201":
          description: Interest created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/interest"
        "500":
          description: Server error

    get:
      tags: [Interests]
      summary: Get all interests
      security:
        - BearerAuth: []
      responses:
        "200":
          description: List of interests
          content:
            application/json:
              schema:
                type: object
                properties:
                  interests:
                    type: array
                    items:
                      $ref: "#/components/schemas/interest"
        "500":
          description: Server error

  /interests/{id}:
    get:
      tags: [Interests]
      summary: Get a specific interest
      security:
        - BearerAuth: []
      parameters:
        - $ref: "#/components/parameters/InterestId"
      responses:
        "200":
          description: Interest data
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/interest"
        "404":
          description: Interest not found
        "500":
          description: Server error

    patch:
      tags: [Interest Admin]
      summary: Update an interest
      security:
        - BearerAuth: []
      parameters:
        - $ref: "#/components/parameters/InterestId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
      responses:
        "200":
          description: Interest updated
        "404":
          description: Interest not found
        "500":
          description: Server error

    delete:
      tags: [Interest Admin]
      summary: Delete an interest
      security:
        - BearerAuth: []
      parameters:
        - $ref: "#/components/parameters/InterestId"
      responses:
        "200":
          description: Interest deleted
        "404":
          description: Interest not found
        "500":
          description: Server error

  /images:
    post:
      tags: [Images]
      summary: Upload an image
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
      responses:
        "201":
          description: Image uploaded successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "400":
          description: No file uploaded
        "500":
          description: Server error or error uploading to S3

  /images/{imageId}:
    get:
      tags: [Images]
      summary: Retrieve an image by ID
      security:
        - BearerAuth: []
      parameters:
        - $ref: "#/components/parameters/ImageId"
      responses:
        "200":
          description: Image data
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Image"
        "404":
          description: Image not found
        "500":
          description: Server error

    delete:
      tags: [Images]
      summary: Delete an image by ID
      security:
        - BearerAuth: []
      parameters:
        - $ref: "#/components/parameters/ImageId"
      responses:
        "200":
          description: Image deleted successfully
        "404":
          description: Image not found
        "500":
          description: Server error or error deleting from S3

  /matches/like:
    post:
      tags: [Matches]
      summary: Like a user
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                toUserId:
                  type: string
      responses:
        "201":
          description: Like or match created successfully
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: "#/components/schemas/Like"
                  - $ref: "#/components/schemas/Match"
        "500":
          description: Server error

  /matches/list:
    get:
      tags: [Matches]
      summary: List all matches of the authenticated user
      security:
        - BearerAuth: []
      responses:
        "200":
          description: List of matches
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Match"

  /matches/unmatch/{matchId}:
    post:
      tags: [Matches]
      summary: Unmatch a user
      security:
        - BearerAuth: []
      parameters:
        - $ref: "#/components/parameters/MatchId"
      responses:
        "200":
          description: Match successfully unmade
        "404":
          description: Match not found
        "401":
          description: Unauthorized action
        "500":
          description: Server error

  /messages/send:
    post:
      tags: [Messages]
      summary: Send a message
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                matchId:
                  type: string
                content:
                  type: string
      responses:
        "201":
          description: Message sent successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Message"
        "500":
          description: Server error

  /messages/{matchId}:
    get:
      tags: [Messages]
      summary: Retrieve messages for a match
      security:
        - BearerAuth: []
      parameters:
        - $ref: "#/components/parameters/MatchId"
      responses:
        "200":
          description: List of messages
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Message"
        "500":
          description: Server error

components:
  schemas:
    User:
      type: object
      properties:
        email:
          type: string
        password:
          type: string
        name:
          type: string
        bio:
          type: string
        birthdate:
          type: string
          format: date
        interests:
          type: array
          items:
            $ref: "#/components/schemas/Interest"
        isAdmin:
          type: boolean
        location:
          type: object
          properties:
            type:
              type: string
              enum: ["Point"]
            coordinates:
              type: array
              items:
                type: number
        images:
          type: array
          items:
            $ref: "#/components/schemas/Image"
          createdAt:
            type: string
            format: date-time
        interest:
          type: array
          items:
            $ref: "#/components/schemas/Interest"

    Like:
      type: object
      properties:
        fromUserId:
          $ref: "#/components/schemas/User"
        toUserId:
          $ref: "#/components/schemas/User"
        createdAt:
          type: string
          format: date-time

    Match:
      type: object
      properties:
        users:
          type: array
          items:
            $ref: "#/components/schemas/User"
        matchedAt:
          type: string
          format: date-time
        isMatchActive:
          type: boolean

    Message:
      type: object
      properties:
        match:
          $ref: "#/components/schemas/Match"
        sender:
          $ref: "#/components/schemas/User"
        receiver:
          $ref: "#/components/schemas/User"
        content:
          type: string
        createdAt:
          type: string
          format: date-time
        read:
          type: boolean

    Image:
      type: object
      properties:
        url:
          type: string
        createdAt:
          type: string
          format: date-time
    Interest:
      type: object
      properties:
        name:
          type: string
        createdAt:
          type: string
          format: date-time
    

  parameters:
    UserId:
      name: userId
      in: path
      required: true
      schema:
        type: string

    InterestId:
      name: id
      in: path
      required: true
      schema:
        type: string

    MatchId:
      name: matchId
      in: path
      required: true
      schema:
        type: string

    ImageId:
      name: imageId
      in: path
      required: true
      schema:
        type: string

  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT